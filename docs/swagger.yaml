basePath: /
definitions:
  controllers.Search:
    properties:
      search:
        type: string
    type: object
  controllers.UserLogin:
    properties:
      blockOrNot:
        type: boolean
      email:
        type: string
      password:
        type: string
    type: object
  controllers.couponData:
    properties:
      coupon:
        type: string
    type: object
  controllers.data:
    properties:
      area:
        type: string
      city:
        type: string
      defaultAdd:
        type: boolean
      district:
        type: string
      email:
        type: string
      first_name:
        type: string
      fullName:
        type: string
      houseName:
        type: string
      is_admin:
        type: boolean
      landmark:
        type: string
      last_name:
        type: string
      phone:
        type: string
      phoneAddrs:
        type: integer
      pincode:
        type: integer
      state:
        type: string
    type: object
  controllers.productData:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  controllers.uSerData:
    properties:
      area:
        type: string
      city:
        type: string
      coupon:
        type: string
      district:
        type: string
      fullName:
        type: string
      landmark:
        type: string
      phone:
        type: string
      pincode:
        type: string
      product_id:
        type: integer
      state:
        type: string
    type: object
  controllers.userData:
    properties:
      email:
        type: string
      password:
        type: string
      repeatePassword:
        type: string
    type: object
  controllers.userEnterData:
    properties:
      email:
        type: string
      lastPassword:
        type: string
      password:
        type: string
    type: object
  models.Address:
    properties:
      addressId:
        type: integer
      area:
        type: string
      city:
        type: string
      defaultadd:
        type: boolean
      district:
        type: string
      fullname:
        type: string
      housename:
        type: string
      landmark:
        type: string
      phone:
        type: integer
      pincode:
        type: integer
      state:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userid:
        type: integer
    type: object
  models.User:
    properties:
      blockOrNot:
        type: boolean
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      otp:
        type: string
      password:
        type: string
      phone:
        type: string
      referal_code:
        type: string
      user_status:
        type: boolean
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
host: localhost:1111
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: An e-commerce site in Go using Gin framework
  title: E-commerce
  version: "1.0"
paths:
  /admin/usermanagement/manageblock:
    patch:
      description: Block or unblock a user by their user ID
      parameters:
      - description: User ID
        in: query
        name: userid
        required: true
        type: integer
      responses:
        "200":
          description: User status updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties: true
            type: object
      summary: Block or Unblock users
      tags:
      - Admin
  /admin/usermanagement/viewusers:
    get:
      consumes:
      - '*/*'
      description: Retrieve a list of active users
      produces:
      - application/json
      responses:
        "200":
          description: List of active users
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties: true
            type: object
      summary: List Users
      tags:
      - Admin
  /user/addaddress:
    post:
      consumes:
      - application/json
      description: Add a new address for the user
      parameters:
      - description: User address data
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.Address'
      produces:
      - application/json
      responses:
        "200":
          description: Address added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Add User Address
      tags:
      - Add Address
      - Users
  /user/applycoupon:
    post:
      consumes:
      - application/json
      description: Apply a coupon code to a specific product in the cart
      parameters:
      - description: Coupon data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.uSerData'
      produces:
      - application/json
      responses:
        "200":
          description: Coupon details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Coupon does not exist
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Apply Coupon
      tags:
      - Coupons
      - Cart
      - Users
  /user/cancelorder:
    patch:
      consumes:
      - application/json
      description: Cancel an order by order ID
      parameters:
      - description: Order ID to cancel
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order cancellation success message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Cancel Order
      tags:
      - Orders
      - Users
      - ""
  /user/cart/checkout:
    get:
      description: Proceed to checkout for the items in the cart
      produces:
      - application/json
      responses:
        "200":
          description: Checkout details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Cart is empty
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Address does not exist
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Checkout
      tags:
      - Cart
      - Users
  /user/changepassword:
    patch:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/controllers.userEnterData'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Change Password
      tags:
      - Authentication
      - Users
  /user/checkcoupon:
    post:
      consumes:
      - application/json
      description: Check the validity of a coupon code
      parameters:
      - description: Coupon data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.couponData'
      produces:
      - application/json
      responses:
        "200":
          description: Coupon validity status
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Coupon does not exist
          schema:
            additionalProperties: true
            type: object
      summary: Check Coupon Validity
      tags:
      - Coupons
      - Cart
      - Users
  /user/editprofile:
    patch:
      consumes:
      - application/json
      description: Edit user profile details and associated address
      parameters:
      - description: User profile data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.data'
      produces:
      - application/json
      responses:
        "200":
          description: Updated profile details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Edit User Profile
      tags:
      - Users
  /user/filterbycategory:
    get:
      description: Get a list of products filtered by category ID
      parameters:
      - description: Category ID
        in: query
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Category doesn't exist
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Filter Products by Category
      tags:
      - Products
      - Users
  /user/forgotpassword:
    patch:
      consumes:
      - application/json
      description: User can change password if forgot
      parameters:
      - description: User input
        in: body
        name: user
        schema:
          $ref: '#/definitions/controllers.userData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Forgot Password
      tags:
      - Authentication
      - Users
  /user/invoice:
    get:
      consumes:
      - application/json
      description: Generate a purchase invoice for a user's order
      produces:
      - application/json
      responses:
        "200":
          description: HTML response
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Generate Purchase Invoice
      tags:
      - Invoice
      - Orders
      - Users
  /user/invoice/download:
    get:
      description: Download the generated purchase invoice as a PDF
      produces:
      - application/pdf
      responses:
        "200":
          description: PDF file
      summary: Download Purchase Invoice
      tags:
      - Invoice
      - Users
  /user/login:
    post:
      consumes:
      - '*/*'
      description: Log in a user and generate an authentication token
      parameters:
      - description: User login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: User Login
      tags:
      - Authentication
  /user/payment/cashOnDelivery:
    get:
      consumes:
      - application/json
      description: Place an order using Cash On Delivery payment method
      produces:
      - application/json
      responses:
        "200":
          description: Order details and status
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart is empty
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Cash On Delivery
      tags:
      - Orders
      - Users
  /user/payment/showwallet:
    get:
      consumes:
      - application/json
      description: Retrieve the balance amount in the user's wallet
      produces:
      - application/json
      responses:
        "200":
          description: Wallet balance
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Show Wallet Balance
      tags:
      - Wallet
      - Users
  /user/products/details:
    get:
      description: Get details of a specific product by its name
      parameters:
      - description: Product name
        in: query
        name: product_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Get Product Details
      tags:
      - Products
      - Users
  /user/products/search:
    post:
      consumes:
      - application/json
      description: Search for products by name
      parameters:
      - description: Search query
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/controllers.Search'
      produces:
      - application/json
      responses:
        "200":
          description: List of matching product
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Search Products
      tags:
      - Products
      - Users
  /user/products/view:
    get:
      description: View a list of products with pagination support
      parameters:
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: View Products
      tags:
      - Products
      - Users
  /user/profile/addtocart:
    post:
      description: Add a product to the user's cart
      parameters:
      - description: Product data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.productData'
      produces:
      - application/json
      responses:
        "200":
          description: Product added to cart successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Out of Stock
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Add Product to Cart
      tags:
      - Cart
      - Users
  /user/profile/deletecart:
    delete:
      description: Delete an item from the user's cart
      parameters:
      - description: Cart item ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cart item deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Cart does not exist
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Delete Cart Item
      tags:
      - Cart
      - Users
  /user/profile/viewcart:
    get:
      description: View items in the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart items
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart is empty
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: View Cart
      tags:
      - Cart
      - Users
  /user/returnorder:
    put:
      consumes:
      - application/json
      description: Request to return an order by providing order ID and product ID
      parameters:
      - description: Product ID of the ordered product
        in: query
        name: product_id
        required: true
        type: integer
      - description: Order ID to be returned
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order return success message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Return Order
      tags:
      - Orders
      - Users
  /user/showorders:
    get:
      consumes:
      - application/json
      description: Get a list of user orders
      produces:
      - application/json
      responses:
        "200":
          description: User order details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No orders found
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Show User Orders
      tags:
      - Orders
      - Users
  /user/signup:
    post:
      consumes:
      - '*/*'
      description: Signup a user with required datas
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successful registration
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User Signup
      tags:
      - Signup
  /user/viewprofile:
    get:
      description: Retrieve user details and asscciated address
      produces:
      - application/json
      responses:
        "202":
          description: User details and address
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerToken: []
      summary: Show User Details
      tags:
      - Users
schemes:
- http
swagger: "2.0"
